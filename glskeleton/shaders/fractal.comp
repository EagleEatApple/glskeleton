#version 460 core
layout (local_size_x = 8, local_size_y = 8) in;
layout (rgba32f, binding = 0) uniform image2D img_out;
uniform vec2 center;
uniform float scale;
uniform int max_iter = 100;

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 map_color(int i, float r, float c) {
    float di = i;
    float zn = sqrt(r + c);
    float hue = (di + 1 - log(log2(abs(zn))))/max_iter;
    return hsv2rgb(vec3(hue, 0.8, 1));
}

void main()
{
    vec2 pixel_xy = gl_GlobalInvocationID.xy;
    vec2 xy = scale * (pixel_xy - center);
    float x = 0.0;
    float y = 0.0;
    int iter = 0;
    while (x*x + y*y < 2*2 && iter < max_iter)
    {
        float nx = x*x - y*y + xy.x;
        float ny = 2*x*y + xy.y;
        x = nx;
        y = ny;
        iter++;
    }
    vec4 color = vec4(0, 0, 0, 1);
    if (iter < max_iter)
    {
        color = vec4(map_color(iter, x*x, y*y),1.0);
    }
    imageStore(img_out, ivec2(pixel_xy), color);
}
